

console.clear();


require('./bootstrap');
window.Vue = require('vue');
import router from './routes';


import BootstrapVue from 'bootstrap-vue'

Vue.use(BootstrapVue);

import VeeValidate from 'vee-validate';

Vue.use(VeeValidate);

import Snotify, { SnotifyPosition } from 'vue-snotify';
Vue.use(Snotify);



import VueRecaptcha from 'vue-recaptcha';
Vue.component('vue-recaptcha',VueRecaptcha);


//globally register mixin
import isLoggedMixin from './mixins/checkIfLoggedIn';
Vue.mixin(isLoggedMixin);

import checkStripePlan from './mixins/checkStripePlan';
Vue.mixin(checkStripePlan);

import scansLeft from './mixins/scansLeft';
Vue.mixin(scansLeft);


import isTwentyFourHoursUp from './mixins/twentyfour';
Vue.mixin(isTwentyFourHoursUp);

import {ClientTable,Event} from 'vue-tables-2';
Vue.use(ClientTable);
import daterangepicker from 'daterangepicker';
window.moment = require('moment');


import VueStripeCheckout from 'vue-stripe-checkout';


const options = {
    key:'pk_test_Wi7oHXWepIqYbA7ItZYywPQp',
    locale:'auto',
    currency : "$",
    billingAddress: true,
    panelLabel : 'Subscribe {{amount}}'
}

Vue.use(VueStripeCheckout,options);


import eventBus from './eventBus';
import { SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG } from 'constants';



//Vue instancew
const app = new Vue({
    
    el: '#app',
    data:{
        navElems:[],
        nav_fixed : false,
        user:null,
        one_day_expired:undefined
    },
    router,
    computed:{
       
    },
    mounted(){
           
        window.scroll(0,0);
        
        let routes_to_disable = [
            '/userreg',
            '/userlogin',
            '/contact',
            '/pricing',
            '/home',
            '/tools',
            '/all-scans',
            '/resetpw',
            '/forgotpw'
        ]
        
        let path_to_disable_sidebar = this._route.path;


        routes_to_disable.forEach((route) =>{
            if(path_to_disable_sidebar === route)
            {
                

                eventBus.$emit("isVisibleSidebar",false);
            }
            else 
            {

                eventBus.$emit("isVisibleSidebar",true);
            }
        })



        this.checkStripePlan()
            .then((title_plan)=>{
                let plan_dom = document.querySelector('.subscription');
                if(plan_dom !== null)
                    plan_dom.innerHTML = `${title_plan}`;
            })
            .catch(()=>{

                this.$snotify.error("An error has occured.", "Error!", {
                    position: SnotifyPosition.centerTop,
                    backdrop: 0.5
                  });
    
                  window.setTimeout(()=>{
                    window.location.reload();
                  },1500)
            })


        this.user = null;
        //one day expired forbid routes.
        this.hasOneDayExpired().then((response)=>{

            let one_day_expired_data = response.data;
            
            let sub_ended = one_day_expired_data === "Trail expired" || one_day_expired_data === "Need to subscribe";


            if(sub_ended) 
                this.one_day_expired = true;
            else 
                this.one_day_expired = false;                 
        })
        .catch(()=>{

            this.$snotify.error("An error has occured.", "Error!", {
                position: SnotifyPosition.centerTop,
                backdrop: 0.5
              });

              window.setTimeout(()=>{
                window.location.reload();
              },1500)
        })

        this.checkIfLogged().then(response=>{
            let user_logged_in = response !== null;
            if(user_logged_in)
            {
                let drop = document.getElementById("user_drop");
                
                let li = document.createElement('li');
                li.innerHTML = "<a href='/#/all-scans'>All scans <i class='fa fa-search'></i></a>";
                drop.insertBefore(li,drop.childNodes[2]);

                this.scansLeft().then(response =>{
                    if(response)
                    {
                        let li = document.createElement('li');
                        li.className = "scans_left";
                        li.innerHTML = `${response} scans left`;
                        drop.insertBefore(li,drop.childNodes[2]);
                    }
                })


                //set visible scans and schedule
                this.user = response;
            }
            else
            {
                this.user=null;
            } 
        }).catch(error => {
            this.user=null;
            
            this.$snotify.error("An error has occured.", "Error!", {
            position: SnotifyPosition.centerTop,
            backdrop: 0.5
            });

            window.setTimeout(()=>{
            window.location.reload();
            },1500)

        })
    }
});

//dont show toolbar on home route

router.beforeEach((to,from,next)=>{
    

    //HARD CODE NZM STO NECE => NUMEM

    if(to.path === "/userlogin")
    {
        eventBus.$emit("isVisibleSidebar",false);
        next();
        return;
    }


    if(to.path === "/userreg")
    {
        eventBus.$emit("isVisibleSidebar",false);
        next();
        return;
    }
    
    
    if(to.path === "/all-scans")
    {
        eventBus.$emit("isVisibleSidebar",false);
        next();
        return;
    }
    
    if(to.matched.some(record => record.meta.dontShowToolbar)){
        eventBus.$emit("isVisibleSidebar",false);
        next();
    }
    else
    {
        eventBus.$emit("isVisibleSidebar",true);
        next();
    }
})

//logged in user restricting routes.. 

router.beforeEach((to,from,next)=>{
    if(to.matched.some(record => record.meta.alreadyLogged)){
        //this route req login 
        let user_logged_in = app.user !== null;
        if(user_logged_in)
        {   
            app.$snotify.warning("Already logged in!",{
                position: SnotifyPosition.centerTop,
                backdrop:0.5,
            });

            next({
                path:"/home"
            })
        }
        else{
            next()
        }
    }
    else
    {
        //not the route needed login
        next();
    }
})

//forbid few routes for not logged in users 
router.beforeEach((to,from,next)=>{
    if(to.matched.some(record => record.meta.notLogged)){
        //this route req login 
        let user_logged_in = app.user !== null; 
        if(!user_logged_in)
        {   
            app.$snotify.error("Not available for visitors","Please login!",{
                position: SnotifyPosition.centerTop,
                backdrop:0.5,
            });

            next({
                path:"/home"
            })
        }
        else{
            next()
        }
    }
    else
    {
        //not the route needed login
        next();
    }
})

//forbid few routes for users one day expired 
router.beforeEach((to,from,next)=>{
    if(to.matched.some(record => record.meta.visitorNotAllowed)){
        let one_day_expired = app.one_day_expired === true; 

        if(one_day_expired)
        {   
            console.log(app.$snotify);

            app.$snotify.error("Subscription has expired.","Please subscribe.",{
                position: SnotifyPosition.centerTop,
                backdrop:0.5,
            });

            next({
                path:"/home"
            })
        }
        else{
            next()
        }
    }
    else
    {
        //not the route needed login
        next();
    }
})

//visitors not allowed
router.beforeEach((to,from,next)=>{
    if(to.matched.some(record => record.meta.visitorNotAllowed)){
        //this route req login 
        let user_not_logged_in = app.user === null;

        if(user_not_logged_in)
        {   
            eventBus.$emit("isVisibleSidebar",false);

            //User logged in
            app.$snotify.error("Not available for visitors","Please login!",{
                position: SnotifyPosition.centerTop,
                backdrop:0.5,
            });

            next({
                path:"/userlogin"
            })
        }
        else{
            next()
        }
    }
    else
    {
        //not the route needed login
        next();
    }
})

//didn't go through forgot
router.beforeEach((to,from,next)=>{
    if(to.matched.some(record => record.meta.NotOnForgot)){
        //this route req login 

        if(!localStorage.getItem("goneThroughForgotPw"))
        {   
            
            app.$snotify.error("Please go to forgot password","Error!",{
                position: SnotifyPosition.centerTop,
                backdrop:0.5,
            });

            next({
                path:"/home"
            })
        }
        else{
            next()
        }
    }
    else
    {
        //not the route needed login
        next();
    }
})



