<?php



namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use phpseclib\Net\SSH2;
use App\User as User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Support\Facades\Mail;
use App\Mail\contactUS;
use Illuminate\Support\Facades\Password;
use Illuminate\Contracts\Auth\CanResetPassword;
use PhpParser\Node\Expr\Error;
use Illuminate\Mail\Message;


class UserController extends Controller
{
    public function getHome()
    {
        return view('home');
    }

    public function skripta()
    {
        $host = '192.168.1.22';
        $username = 'root';
        $password = 'nikola'; 
        $command = 'python /root/PythonP/ping.py google.com';
       
        $ssh = new SSH2($host);
           if (!$ssh->login($username, $password)) {
               $output ='Login Failed';
           }
           else{
               $output = $ssh->exec($command);
        }
        return $output->json();
    }

    public function ping(Request $request)
    {
        $url = $request->url;
        $host = '192.168.1.22';
        $username = 'root';
        $password = 'nikola'; 
        $command = 'ping -c 3 ' . $url;
       // return $command;
       
        $ssh = new SSH2($host);
           if (!$ssh->login($username, $password)) {
               $output ='Login Failed';
           }
           else{
               $output = $ssh->exec($command);
        }
        return $output;
  
    }

    public function profi(Request $request)
    {
        $url = $request->url;
        $host = '192.168.1.22';
        $username = 'root';
        $password = 'nikola'; 
        $command = $request->cmd;
        echo $request->cmd;
        $ssh = new SSH2($host);
           if (!$ssh->login($username, $password)) {
               $output ='Login Failed';
           }
           else{
               $output = $ssh->exec($command);
        }
        return $output;
        

    }

    public function postUserRegister(Request $request)
    {
        
        $request->validate([
            'email'    =>'required',
            'password' =>'required',
            'sameaspw'=>'required'
        ]);

        if(User::where('email', '=', $request->email)->count()>0) {
            return response('This mail already exist', 302)
                ->header('Content-Type', 'text/plain');
        }
        if (!strcmp($request->password, $request->sameaspw )) {
            $user= new User;
            $user->name=$request->firstname;
            $user->lastname=$request->lastname;
            $user->email = $request->email;
            $user->password = Hash::make($request->password);
            $user->save();
        }
    }

    public function postUserLogin(Request $request)
    {
       if(Auth::user())
           return Auth::user()->email;
        
        $email=$request->email;
        $password=$request->pw;
        
        if(Auth::attempt(['email'=>$email,'password'=>$password]))
        {
            
            return Auth::user();
            
        }
        else
        {
           
            return response('Wrong username or password', 302)
                  ->header('Content-Type', 'text/plain');
        }
         
        
        
    }

    
    
    public function passwordReset(Request $request)
    {
        $email=$request->email;
        Password::sendResetLink(['email'=>$email,
                                
        ]);

    }

    public function newPassword(Request $request)
    {
        $user=new User;
       $user=User::where('email',$request->email)->find(1);
       
       $user->password=Hash::make($request->password);
       $user->save();
        
        

    }

    public function logut(Request $request)
    {
       Auth::logut();
       return redirect()->back()->with('message',"You have just logout!"); 

    }
    public function contactUs(Request $request)
    {
        $objSend=new \stdClass;
        $objSend->name=$request->firstname;
        $objSend->msg=$request->message;
        $objSend->sender = $request->email;
        $objSend->subject=$request->subject;
        
        Mail::to("testmailtestmaill123@gmail.com")->send(new contactUS($objSend));
 
    }
    
    public function showScans()
    {
        if(Auth::user())
        {
            $user=new User;
            $user = Auth::user();
            return User::where('id',$user->id);

        }
    }
   
    
}
