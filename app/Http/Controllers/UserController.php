<?php



namespace App\Http\Controllers;
ini_set('max_execution_time', 30000);



use Laravel\Cashier\Cashier;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use phpseclib\Net\SSH2;
use App\User as User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Support\Facades\Mail;
use App\Mail\contactUS;
use Illuminate\Support\Facades\Password;
use Illuminate\Contracts\Auth\CanResetPassword;
use PhpParser\Node\Expr\Error;
use Illuminate\Mail\Message;
use Illuminate\Support\Facades\Input;
use App\Scan;
use PDF;
use Illuminate\Support\Facades\App;
use pdf_parser;
use Dompdf\Adapter\PDFLib;
use Illuminate\Support\Facades\Storage;
use Illuminate\Foundation\Console\Presets\React;
use Illuminate\Support\Carbon;
use App\Subscription;
use Illuminate\Console\Scheduling\Schedule;
use App\Http\Console\Kernel;
use App\Schedules as Schedules;
use App\Subscriptions;
use PhpParser\Node\Expr\ShellExec;
use Illuminate\Support\Facades\Response;
use Illuminate\Support\Facades\File;
use function GuzzleHttp\json_encode;





User::setStripeKey('sk_test_CScSGOYWD5vtDOL7ORw1KPoO');


class UserController extends Controller
{
   public $passwordResetEmail;

    public function getHome()
    {
      
        return view('home');
        
    }


  public function scansLeft()
  {
     if(Auth::user())
     {
        return Auth::user()->scans_left;
     }
     return "You must be logged in";
  }

    public function profi(Request $request)
    {
        
        $scanN=$request->scan;
      
        $command = $request->cmd;
        $command="sudo"." ".$command ." "."2>&1";
     //  $test='python /root/dnsrecon/dnsrecon.py -d www.hackthissite.org 2>&1';
        $output=shell_exec($command);
        $outputToRet=$output;
       if(Auth::user())
       {
          
           $dirName=Auth::user()->full_name.Auth::user()->id;
           Storage::makeDirectory($dirName);
           $date=Carbon::now();
           $date=str_replace(' ','_',$date);
           $date=str_replace(':','_',$date);
           
           $pdfOut=json_encode($output);
           $pdfOut=str_replace('\n','<br>',$pdfOut);
           
           
          // $fileName='app/'.$dirName.'/'.$scanN.'_'.$date.'.pdf';
           $saveFileName=$dirName.'/'.$scanN.'_'.$date.'.pdf';
            
           
  
          
           Storage::put($saveFileName,$pdfOut);
           $scan=new Scan;
           $scan->user_id=Auth::user()->id;
           $scan->path=Storage::url($saveFileName);
           $scan->scanName=$scanN;
           $scan->save();
           if(!($scanN==='Icmp Ping' || $scanN==='Whois Lookup'))
           { 
            $user=User::where('id',Auth::user()->id)->first();
            $user->scans_left--;
            $user->save();
           
           }

       }

        return $outputToRet;
    
        

    }
   
    public function postUserRegister(Request $request)
    {
        
        $request->validate([
            
            'email'    =>'required',
            'password' =>'required',
            'sameaspw'=>'required'
        ]);

        if(User::where('email', '=', $request->email)->count()>0) {
            return 'This mail already exist';
        }
        if (!strcmp($request->password, $request->sameaspw )) {
            $user= new User;
            $user->full_name=$request->full_name;
            
            $user->email = $request->email;
            $user->password = Hash::make($request->password);
            $user->remember_token=str_random(100);
            
            $user->confirmation_code=str_random(30);
            $this->passwordResetEmail=$request->email;
          
            $confirmation_code=$user->confirmation_code;
            $user->save();
            Mail::send('verify',['confirmation_code'=>$confirmation_code], function($message){
                
                $message->to($this->passwordResetEmail);
                $message->subject('Verify your email');
            
            });
            return redirect('/');
         
           
        
         }
        
    }
    public function confirmedMail($token)
    {
        
        $user=User::where('confirmation_code',$token)->first();
        if(!$user)
        {
            return "User does not exist";
        }
        $user->confirmed=1;
        $user->confirmation_code=null;
        $user->save();
        return redirect('home');
    }
    public function postUserLogin(Request $request)
    {
      
       
        $email=$request->email;
        $password=$request->pw;
        $user=User::where('email',$email)->first();
     if($user)
        {
        if($user->confirmed==false)
        {
            return 'Please verify your account';
        }
        
        if(Auth::attempt(['email'=>$email,'password'=>$password]))
        {
            
            return Auth::user();
            
        }
        else
        {
           
            return 'Wrong username or password';
                  
        }
       }
      return 'User does not exist';
         
        
        
    }
    public function reset()
    {
       
            $user=new User;
            $user=User::where('email',Input::get('email'))->first();
            $user->password=Hash::make(Input::get('password'));
            $user->save();
            
    }


   public function getResetPassword($token)
   {
        $data=['token'=>$token];
        return view('auth.passwords.reset',$data);
   }
    
    public function passwordRecovery(Request $request)
    {
        $email=$request->email;
        $user = User::where('email',$email)->first();
        if($user === null){
            return "404";
        }else{
        Password::sendResetLink(['email'=>$email]);
        return "200";
        }

    }

    public function postChangePassword(Request $request)
    {
        if(Auth::check()){
        $user=new User;
        $user=Auth::user();
        $user->password=Hash::make($request->password);
        $user->save();
        }
        

    }

    public function logout()
    {
        
       Auth::logout();
        return redirect("/");
    }
    public function contactUs(Request $request)
    {
        
        $objSend=new \stdClass;
        $objSend->name=$request->full_name;
        $objSend->msg=$request->message;
        $objSend->sender = $request->email;
        $objSend->subject=$request->subject;
        
        Mail::to("info@arcnetsecurity.com")->send(new contactUS($objSend));
 
    }
    
    public function showScans()
    {   
        $scans = Scan::where('user_id',Auth::user()->id)->get();
        return $this->json($scans);
        
    }
   
    public function DownloadScan($dirName,$fileName)
    {
       
        $abPath='app/'.$dirName.'/'.$fileName;
        $path=storage_path($abPath);
        
        $outputPDF=File::get($path);
        $test='agniasngain\njgiaskgopaksoga\njgosakgoa';
        $newOutput='<p>'.$outputPDF.'</p>';
       // return $outputPDF;
       // $outputPDF=str_replace('\\n','<br>',$outputPDF);
        $pdf=\App::make('dompdf.wrapper');
        $pdf->loadHTML($outputPDF);
        
       
        return $pdf->download($fileName);
 
    }

    public function scheduleScan(Request $request)
    {
        
        if(Auth::user()){
        $schedule=new Schedules();
        $schedule->user_id=Auth::user()->id;
        $schedule->date=$request->scan_date;
        $schedule->scan_name=$request->scan_name;
        $schedule->command=$request->cmd;
        $schedule->save();
        }
       
    }

    public function subscribeUser(Request $request)
    {
        if(Auth::user())
        {
           
            if($request->amount===4900)
            {   
               
                if(Auth::user()->subscribed('Main','Monthly499') || Auth::user()->subscribed('Main','Monthly149'))
                {
                  
                    Auth::user()->subscription('Main','Monthly499')->swap('Monthly49');
                    Auth::user()->scans_left=500;
                    Auth::user()->old_updated=Auth::user()->updated_at;
                    Auth::user()->save();
                   
                }
                else{
                    
                   
               
                     Auth::user()->newSubscription('Main','Monthly49')->create($request->token['id']);
                     Auth::user()->scans_left=500;
                     Auth::user()->old_updated=Auth::user()->updated_at;
                     Auth::user()->save();
                }
             }
            else if($request->amount===15000)
            {
                 if(Auth::user()->subscribed('Main','Monthly49') || Auth::user()->subscribed('Main','Monthly499'))
                {
                  
                    Auth::user()->subscription('Main')->swap('Monthly149');
                    Auth::user()->scans_left=2500;
                    Auth::user()->old_updated=Auth::user()->updated_at;
                    Auth::user()->save();
                    
                }
                else{
                   
                Auth::user()->newSubscription('Main','Monthly149')->create($request->token['id']);
                Auth::user()->scans_left=1500;
                Auth::user()->old_updated=Auth::user()->updated_at;
                Auth::user()->save();
                }
            }
            else if($request->amount===49900)
            {
                if(Auth::user()->subscribed('Main','Monthly49') || Auth::user()->subscribed('Main','Monthly149'))
                {
                 
                    Auth::user()->subscription('Main')->swap('Monthly499');
                    Auth::user()->scans_left=2500;
                    Auth::user()->old_updated=Auth::user()->updated_at;
                    Auth::user()->save();
                }
                else{
                    
                Auth::user()->newSubscription('Main','Monthly499')->create($request->token['id']);
                Auth::user()->scans_left=2500;
                Auth::user()->old_updated=Auth::user()->updated_at;
                Auth::user()->save();
                }
            }
            else {
               
                return 'false';
            }




        }
    }

    public function cancleSubscription()
    {
        Auth::user()->subscription($name)->cancel();
        $name=Subscriptions::where('user_id',Auth::user()->id)->first()->name;
       
       
    }

    public function isSubscribed()
    {
        if(Auth::user())
        {

        if(Auth::user()->subscribed('Main','Monthly49') || Auth::user()->subscribed('Main','Monthly149') || Auth::user()->subscribed('Main','Monthly499'))
        {
            return 'User is on subscription';
         }
        else if(!Carbon::now()->gt(Carbon::createFromFormat('Y-m-d H:i:s',Auth::user()->created_at)->addDay(1)))
        {
            return "User is on trail";
        }
        else if(Subscriptions::where('user_id',Auth::user()->id)->first()!=null)
        {
            return 'User is on subscription';
        }
        else if (!(Auth::user()->subscribed('Main','Monthly49') ||Auth::user()->subscribed('Main','Monthly149') || Auth::user()->subscribed('Main','Monthly499')) || !((Subscriptions::where('user_id',Auth::user()->id)->first()!=null)))
        {
            return 'Need to subscribe';
        }
        else if(Carbon::now()->gt(Carbon::createFromFormat('Y-m-d H:i:s',Auth::user()->created_at)->addDay(1)))
        {
            return 'Trail expired';
        }
      
      
        }
        else 
        return 'null';

            
   
    }

    public function cancelSubNow()
    {
        if(Auth::user())
        {
            Auth::user()->subscription('Main')->cancelNow();
            Subscriptions::where('user_id',Auth::user()->id)->first()->delete();

        }
    }

    public function returnStripePlan()
    {
     
       if(Auth::user())
       {
            
       if(Auth::user()->subscribed('Main','Monthly49') ||Auth::user()->subscribed('Main','Monthly149') || Auth::user()->subscribed('Main','Monthly499') )
         return Subscriptions::where('user_id',Auth::user()->id)->first()->stripe_plan;
       else 
         return 'Free';
       }
       else 
       return  'null';
    }
}