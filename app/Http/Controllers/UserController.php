<?php



namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use phpseclib\Net\SSH2;
use App\User as User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Auth\Events\PasswordReset;


class UserController extends Controller
{
    public function getHome()
    {
        return view('home');
    }

    public function skripta()
    {
        $host = '192.168.1.22';
        $username = 'root';
        $password = 'nikola'; 
        $command = 'python /root/PythonP/ping.py google.com';
       
        $ssh = new SSH2($host);
           if (!$ssh->login($username, $password)) {
               $output ='Login Failed';
           }
           else{
               $output = $ssh->exec($command);
        }
        return $output->json();
    }

    public function ping(Request $request)
    {
        $url = $request->url;
        $host = '192.168.1.22';
        $username = 'root';
        $password = 'nikola'; 
        $command = 'ping -c 3 ' . $url;
       // return $command;
       
        $ssh = new SSH2($host);
           if (!$ssh->login($username, $password)) {
               $output ='Login Failed';
           }
           else{
               $output = $ssh->exec($command);
        }
        return $output;
  //      return $output->json();
      //  return $request->url;
    }

    public function profi(Request $request)
    {
        $url = $request->url;
        $host = '192.168.1.22';
        $username = 'root';
        $password = 'nikola'; 
        $command = $request->cmd;
        echo $request->cmd;
        $ssh = new SSH2($host);
           if (!$ssh->login($username, $password)) {
               $output ='Login Failed';
           }
           else{
               $output = $ssh->exec($command);
        }
        return $output;
        //  return $output->json();

    }

    public function postUserRegister(Request $request)
    {
        // return $request;
        $request->validate([
            'email'    =>'required',
            'password' =>'required',
            'sameaspw'=>'required'
        ]);

        if(User::where('email', '=', $request->email)->count()>0) {
            return redirect()->back()->withErrors(['error', 'User with this email already exists!']);
        }
        if (!strcmp($request->password, $request->sameaspw )) {
            $user= new User;
            $user->email = $request->email;
            $user->password = Hash::make($request->password);
            $user->save();
        }
    }

    public function postUserLogin(Request $request)
    {
        $email=$request->email;
        $password=$request->pw;
        $user = User::where('email',$email)->first();
        if(Auth::attempt(['email'=>$email,'password'=>$password]))
        {
            
            return $user->json();
        }
        else
        {
           
            return redirect()->back()->withErrors(['error','Wrong username or password']);
        }
        
    }

    public function passwordReset(Request $request)
    {
        $email=$request->email;
        Password::sendResetLink(['email'=>$email]);

    }

   

}
