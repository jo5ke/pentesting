<?php



namespace App\Http\Controllers;
ini_set('max_execution_time', 300);

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use phpseclib\Net\SSH2;
use App\User as User;
use Illuminate\Support\Facades\Auth;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Support\Facades\Mail;
use App\Mail\contactUS;
use Illuminate\Support\Facades\Password;
use Illuminate\Contracts\Auth\CanResetPassword;
use PhpParser\Node\Expr\Error;
use Illuminate\Mail\Message;
use Illuminate\Support\Facades\Input;
use App\Scan;
use Illuminate\Support\Facades\Storage;
use Illuminate\Foundation\Console\Presets\React;
use Illuminate\Support\Carbon;


class UserController extends Controller
{
    public function getHome()
    {
      //  return view('home');
        return ['redirect' => route('root')];
    }

    public function skripta()
    {
        $host = '192.168.1.22';
        $username = 'root';
        $password = 'nikola'; 
        $command = 'python /root/PythonP/ping.py google.com';
       
        $ssh = new SSH2($host);
           if (!$ssh->login($username, $password)) {
               $output ='Login Failed';
           }
           else{
               $output = $ssh->exec($command);
        }
        return $output->json();
    }

    public function ping(Request $request)
    {
        $url = $request->url;
        $host = '192.168.1.22';
        $username = 'root';
        $password = 'nikola'; 
        $command = 'ping -c 3 ' . $url;
       // return $command;
       
        $ssh = new SSH2($host);
           if (!$ssh->login($username, $password)) {
               $output ='Login Failed';
           }
           else{
               $output = $ssh->exec($command);
        }
        return $output;
  
    }

    public function profi(Request $request)
    {
        $url = $request->url;
        $scanN=$request->scan;
        $host = '45.33.31.236';
        $username = 'root';
        $password = 'L0g1n99'; 
        $command = $request->cmd;
      //  echo $request->cmd;
        $ssh = new SSH2($host,22,500);
           if (!$ssh->login($username, $password)) {
               $output ='Login Failed';
           }
           else{
               $output = $ssh->exec($command);
        }
       if(Auth::user())
       {
           $dirName=Auth::user()->name.$fileName=Auth::user()->id;
           Storage::makeDirectory($dirName);
           $date=Carbon::now();
           $date=str_replace(' ','_',$date);
           $date=str_replace(':','_',$date);
           $fileName=$dirName.'/'.$scanN.'_'.$date.'.txt';
           
           Storage::put($fileName,$output);
           $scan=new Scan;
           $scan->user_id=Auth::user()->id;
           $scan->path=Storage::url($fileName);
           $scan->scanName=$scanN;
           $scan->save();

       }

        return $output;
        

    }
   
    public function postUserRegister(Request $request)
    {
        
        $request->validate([
            'email'    =>'required',
            'password' =>'required',
            'sameaspw'=>'required'
        ]);

        if(User::where('email', '=', $request->email)->count()>0) {
            return response('This mail already exist', 302)
                ->header('Content-Type', 'text/plain');
        }
        if (!strcmp($request->password, $request->sameaspw )) {
            $user= new User;
            $user->name=$request->firstname;
            $user->lastname=$request->lastname;
            $user->email = $request->email;
            $user->password = Hash::make($request->password);
            $user->save();
        }
    }

    public function postUserLogin(Request $request)
    {
      
       
        $email=$request->email;
        $password=$request->pw;
        
        if(Auth::attempt(['email'=>$email,'password'=>$password]))
        {
            
            return Auth::user();
            
        }
        else
        {
           
            return response('Wrong username or password', 302)->header('Content-Type', 'text/plain');
                  
        }
         
        
        
    }
    public function reset()
    {
       
            $user=new User;
            $user=User::where('email',Input::get('email'))->first();
            $user->password=Hash::make(Input::get('password'));
            $user->save();
            
    }


   public function getResetPassword($token)
   {
        $data=['token'=>$token];
        return view('auth.passwords.reset',$data);
   }
    
    public function passwordRecovery(Request $request)
    {
        $email=$request->email;
        $user = User::where('email',$email)->first();
        if($user === null){
            return "404";
        }else{
        Password::sendResetLink(['email'=>$email]);
        return "200";
        }

    }

    public function postChangePassword(Request $request)
    {
        if(Auth::check()){
        $user=new User;
        $user=Auth::user();
        $user->password=Hash::make($request->password);
        $user->save();
        }
        

    }

    public function logout()
    {
        
       Auth::logout();
        return redirect("/");
    }
    public function contactUs(Request $request)
    {
        $objSend=new \stdClass;
        $objSend->name=$request->firstname;
        $objSend->msg=$request->message;
        $objSend->sender = $request->email;
        $objSend->subject=$request->subject;
        
        Mail::to("testmailtestmaill123@gmail.com")->send(new contactUS($objSend));
 
    }
    
    public function showScans()
    {   
        $scans = Scan::where('user_id',Auth::user()->id)->get();
        return $this->json($scans);
        
    }
   
    
}
