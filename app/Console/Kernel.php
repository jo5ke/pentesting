<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
use FontLib\Table\Type\post;
use phpseclib\Net\SSH2;
use App\User;
Use App\Schedules;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Carbon;
use App\Scan;
use App\Subscriptions;


class Kernel extends ConsoleKernel
{
    /**
     * The Artisan commands provided by your application.
     *
     * @var array
     */
    protected $commands = [
        //
    ];

    /**
     * Define the application's command schedule.
     *
     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
     * @return void
     */
    protected function schedule(Schedule $schedule)
    {
       
        $schedule->call(function(){

            $allSchedules=Schedules::all()->toArray();
            
            foreach($allSchedules as $scheduled)
            {
               if(strcmp(substr($scheduled['date'],0,10),substr(Carbon::now()->setTimezone('Europe/Belgrade')->toDateString(),0,10))==0)
               //if(true)
               {
               
        
                $command=$scheduled['command'];
                $command="sudo"." ".$command ." "."2>&1";
                $output=shell_exec($command);
               
                  
                   $dirName=User::where('id',$scheduled['user_id'])->first()->name.$scheduled['user_id'];
                   Storage::makeDirectory($dirName);
                   $date=Carbon::now();
                   $date=str_replace(' ','_',$date);
                   $date=str_replace(':','_',$date);
                   $fileName=$dirName.'/'.$scheduled['scan_name'].'_'.$date.'.txt';
                   
                   Storage::put($fileName,$output);
                   $scan=new Scan;
                   $scan->user_id=$scheduled['user_id'];
                   $scan->path=Storage::url($fileName);
                   $scan->scanName=$scheduled['scan_name'];
                   $scan->save();
                   Schedules::where('user_id',$scheduled['user_id'])->first()->delete();
                   if(!($scanN==='Icmp Ping' || $scanN==='Whois Lookup'))
                    User::where('id',$user_id)->scans_left--;
            }
               
            };

            $allSubscriptions=Subscriptions::all()->toArray();
            foreach($allSubscriptions as $subscription)
            {
                if(Carbon::now()->gt(Carbon::createFromFormat('Y-m-d H:i:s',$subscription['ends_at'])))
                {
                    Subscriptions::where('id',$subscription['id'])->first()->delete();
                }
            };
            
        });
        // $schedule->call(function()
        // {
        //     $allSubscriptions =Subscriptions::all()->toArray();
        //     foreach($allSubscriptions as $subscription)
        //     {
        //         if($subscription['ends_at']!=NULL && Carbon::now()->gt($subscription['ends_at']) )
        //         {
        //             Subscriptions::where('user_id',$subscription['user_id'])->first()->delete();
        //         }
        //     }





        //         });
        }

    /**
     * Register the commands for the application.
     *
     * @return void
     */
    protected function commands()
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
}
