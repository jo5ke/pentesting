<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
use FontLib\Table\Type\post;
use phpseclib\Net\SSH2;
use App\User;
Use App\Schedules;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Carbon;
use App\Scan;
use App\Subscriptions;
use Illuminate\Support\Facades\DB;
use Laravel\Cashier\Subscription;


class Kernel extends ConsoleKernel
{
    /**
     * The Artisan commands provided by your application.
     *
     * @var array
     */
    protected $commands = [
        //
    ];

    /**
     * Define the application's command schedule.
     *
     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
     * @return void
     */
    protected function schedule(Schedule $schedule)
    {
       
        $schedule->call(function(){

            $allSchedules=Schedules::all()->toArray();
            
            foreach($allSchedules as $scheduled)
            {
               if(strcmp(substr($scheduled['date'],0,10),substr(Carbon::now()->setTimezone('Europe/Belgrade')->toDateString(),0,10))==0)
               
               {
               
        
                $command=$scheduled['command'];
                $command="sudo"." ".$command ." "."2>&1";
                $output=shell_exec($command);
               
                  
                   $dirName=User::where('id',$scheduled['user_id'])->first()->full_name.$scheduled['user_id'];
                   Storage::makeDirectory($dirName);
                   $date=Carbon::now();
                   $date=str_replace(' ','_',$date);
                   $date=str_replace(':','_',$date);

                   $outToPDF=json_encode($output);
                   $outToPDF=str_replace('\n','<br>',$outToPDF);
                   $fileName=$dirName.'/'.$scheduled['scan_name'].'_'.$date.'.pdf';
                   
                   Storage::put($fileName,$outToPDF);
                   $scan=new Scan;
                   $scan->user_id=$scheduled['user_id'];
                   $scan->path=Storage::url($fileName);
                   $scan->scanName=$scheduled['scan_name'];
                   $scan->save();
                   Schedules::where('user_id',$scheduled['user_id'])->first()->delete();
                   if(!($scanN==='Icmp Ping' || $scanN==='Whois Lookup'))
                    User::where('id',$user_id)->scans_left--;
            }
               
            };
        });


        $schedule->call(function(){

            $allSubscriptions=Subscriptions::all()->where('ends_at','!=','')->toArray();
            foreach($allSubscriptions as $subscription)
            {
                if(Carbon::now()->gt(Carbon::createFromFormat('Y-m-d H:i:s',$subscription['ends_at'])))
                {
                    Subscriptions::where('id',$subscription['id'])->first()->delete();
                }
               
            };


        });


       $schedule->call(function()
       {
        $scansRefresh=DB::table('subscriptions')->select('subscriptions.updated_at','users.id','users.old_updated','subscriptions.stripe_plan')->join('users','subscriptions.user_id','=','users.id')->get();
        foreach($scansRefresh as $userScan)
        {
            if($userScan->stripe_plan==='Monthly49')
            {
                if($userScan->updated_at!=$userScan->old_updated)
                    {
                        $user=User::where('id',$userScan->id)->first();
                        $user->scans_left=500;
                        $user->old_updated=$userScan->updated_at;
                        $user->save();
                    }
            }
            else if($userScan->stripe_plan==='Monthly150')
            {
                if(Carbon::createFromFormat('Y-m-d H:i:s',$userScan->old_updated)->addDays(7)->lt(Carbon::now()))
                {

                    $user=User::where('id',$userScan->id)->first();
                    $user->scans_left=1500;
                    $user->old_updated=Carbon::now();
                    $user->save();
                }
            }
            else 
            {
                if(Carbon::createFromFormat('Y-m-d H:i:s',$userScan->old_updated)->addDays(1)->lt(Carbon::now()))
                {
                    
                    $user=User::where('id',$userScan->id)->first();
                    $user->scans_left=2500;
                    $user->old_updated=Carbon::now();
                    $user->save();
                }
            }
        }
       });
    }

    /**
     * Register the commands for the application.
     *
     * @return void
     */
    protected function commands()
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
}
