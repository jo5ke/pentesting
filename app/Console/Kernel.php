<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;
use FontLib\Table\Type\post;
use phpseclib\Net\SSH2;
use App\User;
Use App\Schedules;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Carbon;
use App\Scan;

class Kernel extends ConsoleKernel
{
    /**
     * The Artisan commands provided by your application.
     *
     * @var array
     */
    protected $commands = [
        //
    ];

    /**
     * Define the application's command schedule.
     *
     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
     * @return void
     */
    protected function schedule(Schedule $schedule)
    {
       
        $schedule->call(function(){

            $allSchedules=Schedules::all()->toArray();
            
            foreach($allSchedules as $scheduled)
            {
                if(strcmp(substr($scheduled['date'],0,10),substr(Carbon::now()->toDateString(),0,10))==0)
               {
                $host = '45.33.31.236';
                $username = 'root';
                $password = 'L0g1n99'; 
                
              
                $ssh = new SSH2($host,22,500);
                   if (!$ssh->login($username, $password)) {
                       $output ='Login Failed';
                   }
                   else{
                       $output = $ssh->exec($scheduled['command']);
                }
               
                  
                   $dirName=User::where('id',$scheduled['user_id'])->first()->name.$scheduled['user_id'];
                   Storage::makeDirectory($dirName);
                   $date=Carbon::now();
                   $date=str_replace(' ','_',$date);
                   $date=str_replace(':','_',$date);
                   $fileName=$dirName.'/'.$scheduled['scan_name'].'_'.$date.'.txt';
                   
                   Storage::put($fileName,$output);
                   $scan=new Scan;
                   $scan->user_id=$scheduled['user_id'];
                   $scan->path=Storage::url($fileName);
                   $scan->scanName=$scheduled['scan_name'];
                   $scan->save();
                   Schedules::where('user_id',$scheduled['user_id'])->first()->delete();
            }
               
            };
            
        })->daily();
        }

    /**
     * Register the commands for the application.
     *
     * @return void
     */
    protected function commands()
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
}
